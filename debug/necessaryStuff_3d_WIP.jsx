// R: the "necessaryStuffPage.ai" currently has to be opened to get the below stuff done var myDoc = app.activeDocument; // get the active docvar myDocName = myDoc.name; // as it won't be active during the ops(function(logs){  logs += 'OPENED DOCUMENTS: \n\n';  for(var i=0; i < app.documents.length; i++){    logs+= i + ': ' + app.documents[i].name + '\n';      }  alert( logs );})("");// check the doc whose name is "necessaryStuffPage.ai" & get all its GraphicStyles that have a name starting with the 'stephaneag' like "stephaneag.GraphicStyle.deg0" into an arrayvar necessaryStuffPageDoc = app.documents.getByName ("necessaryStuffPage.ai");var threeDeeStyles = [];(function(logs){  logs += 'GRAPHIC STYLES: \n\n';  for(var i=0; i < necessaryStuffPageDoc.graphicStyles.length; i++){    logs+= i + ': ' + necessaryStuffPageDoc.graphicStyles[i].name + '\n';    // check whether or not to add them to the styles we'll use    //if ( necessaryStuffPageDoc.graphicStyles[i].name.startsWith('stephaneag.GraphicStyle.') ) threeDeeStyles.push( necessaryStuffPageDoc.graphicStyles[i] );    // no ES6 as for the above is the reason for this    if ( necessaryStuffPageDoc.graphicStyles[i].name.lastIndexOf('stephaneag.GraphicStyle.', 0) === 0 ) {      var dataDeg = necessaryStuffPageDoc.graphicStyles[i].name.substr('stephaneag.GraphicStyle.'.length);      logs+= ' -->' + dataDeg + '\n';      //necessaryStuffPageDoc.graphicStyles[i].dataDeg = dataDeg; // can we ? -> nope :/  ..      //threeDeeStyles.push( necessaryStuffPageDoc.graphicStyles[i] ); // original      threeDeeStyles.push( [necessaryStuffPageDoc.graphicStyles[i], dataDeg.substr('deg'.length)] ); // tweaked ;p    }  }  alert( logs );})("");// quick log to make sure(function(logs){  logs += '3D STYLES: \n\n';  for(var i=0; i < threeDeeStyles.length; i++){    //logs+= i + ': ' + threeDeeStyles[i].name + '\n'; // original    logs+= i + ': ' + threeDeeStyles[i][0].name + '\n';    logs+= ' ==> ' + threeDeeStyles[i][1] + '° \n';  }  alert( logs );})("");// check if we have a layer called 'image' or 'text' in the currently active documentvar workLayers = [];(function(logs){  logs += 'ACTIVE DOCUMENT LAYERS: \n\n';  for(var i=0; i < myDoc.layers.length; i++){    logs+= i + ': ' + myDoc.layers[i].name + '\n';    if ( myDoc.layers[i].name.lastIndexOf('text', 0) === 0 || myDoc.layers[i].name.lastIndexOf('image', 0) === 0 ) {      workLayers.push(myDoc.layers[i]);    }  }  alert( logs );})("");// if we have a layer to work on,  then continue, else, alert that we're missing the point here .. ;pif ( workLayers.length === 0 ) alert('not any work layer found ! ( not any named "text" or "image" )');// get all the pageItems on the layervar layerPageItems = workLayers[0].pageItems;(function(logs){  logs += 'WORK LAYERS ITEMS: \n\n';  for(var i=0; i < layerPageItems.length; i++){    logs+= i + ': ' + layerPageItems[i].name + ' ( ' + layerPageItems[i].typename + ' )' + '\n';    var theProps = layerPageItems[i].reflect.properties;    //logs+= theProps.split(",").join('\n') + '\n';    logs += theProps.join("\n") + '\n'; // ok cool    //for(var j=0; j < theProps.length; j++){      //if(theProps[j] !== '__proto__' ) logs += theProps[j] + ': ' + layerPageItems[i][theProps[j]] + '\n';      //if(theProps[j] !== '__proto__' ) logs += theProps[j] + ': ' + layerPageItems[i]['contents'] + '\n'; // good debug ;p      //if(layerPageItems[i][theProps[j]]) logs += theProps[j] + ': ' + layerPageItems[i][theProps[j]] + '\n';      //if(layerPageItems[i].hasOwnProperty([theProps[j]])) logs += theProps[j] + ': ' + layerPageItems[i][theProps[j]] + '\n';    //}    //for(param in layerPageItems[i]){      //if( layerPageItems[i].hasOwnProperty(param) ) logs += param + ': ' + layerPageItems[i][param] + '\n';    //}  }  alert( logs );})("");var originalDoc = app.documents.getByName(myDocName);var myDoc = app.documents.getByName(myDocName);// for all items in this array ( the 3d styles array )://for(var i=0; i < threeDeeStyles.length; i++){for(var i=0; i < 1; i++){ // DEBUG// create a new doc with same dimensions as the original one  var tmpDoc = app.documents.add (originalDoc.documentColorSpace , originalDoc.width, originalDoc.height, originalDoc.numArtboards, originalDoc.artboardLayout, originalDoc.artboardSpacing, originalDoc.artboardRowsOrCols);  //var tmpLayer = tmpDoc.layers.add(); // not needed, since we have one layer by default  // duplicate the stuff present on the 'image'/'text' layer there & group them  alert('original page items count: ' + layerPageItems.length);  alert( layerPageItems[0].contents )  // quick dumb test  var myLine = tmpDoc.pathItems.add();  //set stroked to true so we can see the path   myLine.stroked = true;   myLine.setEntirePath([[220, 475], [375, 300], [200, 300]]);    //var rectRef = tmpDoc.layers[0].pathItems.rectangle(700, 50, 100, 100);  var rectRef = tmpDoc.pathItems.rectangle(700, 50, 100, 100);  //use the areaText method to create the text frame  //var areaTextRef = tmpDoc.layers[0].textFrames.areaText(rectRef);  var areaTextRef = tmpDoc.textFrames.areaText(rectRef);  var dummyText = "SHIT ?";  areaTextRef.contents = dummyText;  redraw();    for(var j=0; j < layerPageItems.length; j++){    if ( layerPageItems[j].typename === 'TextFrame'){      //tmpLayer.textFrames.add ?      //alert( layerPageItems[i].reflect.properties) won't be called, silly ! ^^      var tmpAreaText = tmpDoc.pathItems.rectangle(700, 50, 100, 100);      var tmpTxtFrame = tmpDoc.textFrames.areaText( tmpAreaText );      tmpTxtFrame.contents = layerPageItems[j].contents;      tmpTxtFrame.fontColor = layerPageItems[j].fontColor ;      tmpTxtFrame.fontSize = layerPageItems[j].fontSize;      tmpTxtFrame.font = layerPageItems[j].font;      tmpTxtFrame.fontStyle = layerPageItems[j].fontStyle;      //var oriContents = layerPageItems[j].contents;      //tmpTxtFrame.contents = oriContents;      redraw();    }  }  // apply the graphic style to the layer's stuff ( to the group )  // save the file as <originalDocName_minus.ai>_deg<graphicStyle_degree>}